/////////////////////sonar///////////////////////
bool flag[6] = {1,1,1,1,1,1};

#include <Wire.h>
#include <LSM303.h>

#include <NewPing.h>

LSM303 compass;

float heading = 0.0;
float target_heading_angle = 0.0;

#define SONAR_NUM 3      // Number of sensors.
#define MAX_DISTANCE 150 // Maximum distance (in cm) to ping.
#define WALL_GAP_DISTANCE      300//mm 단위
#define WALL_GAP_DISTANCE_HALF 150 //mm 단위
#define MOTOR_PWM_OFFSET 50


#define Front 0
#define Left  1 
#define Right 2

#define TRIG1 14 // 초음파 센서 1번 Trig 핀 번호
#define ECHO1 15 // 초음파 센서 1번 Echo 핀 번호

#define TRIG2 16 // 초음파 센서 2번 Trig 핀 번호
#define ECHO2 17 // 초음파 센서 2번 Echo 핀 번호

#define TRIG3 18 // 초음파 센서 3번 Trig 핀 번호
#define ECHO3 19 // 초음파 센서 3번 Echo 핀 번호

NewPing sonar[SONAR_NUM] = {   // Sensor object array.
NewPing(TRIG1, ECHO1, MAX_DISTANCE), // Each sensor's trigger pin, echo pin, and max distance to ping.
NewPing(TRIG2, ECHO2, MAX_DISTANCE),
NewPing(TRIG3, ECHO3, MAX_DISTANCE)
};


/////////////////////L298//////////////////////////
#define ENA 6
#define IN1 11
#define IN2 10
#define IN3 9
#define IN4 8
#define ENB 7

 float front_sonar = 0.0;
 float left_sonar  = 0.0;
 float right_sonar = 0.0;

/////////////////////Maze_Status//////////////////////////
int maze_status = 0; 


void setup() 
{
  Wire.begin();
  compass.init();
  compass.enableDefault();
  flag[0] = 0;

  pinMode(TRIG1, OUTPUT);
  pinMode(ECHO1, INPUT);

  pinMode(TRIG2, OUTPUT);
  pinMode(ECHO2, INPUT);

  pinMode(TRIG3, OUTPUT);
  pinMode(ECHO3, INPUT);
  
  pinMode(ENA, OUTPUT);
  pinMode(IN1, OUTPUT);
  pinMode(IN2, OUTPUT);

  pinMode(IN3, OUTPUT);
  pinMode(IN4, OUTPUT);
  pinMode(ENB, OUTPUT);
   Serial.begin(9600); // 통신속도를 9600으로 정의함
  
  
}

void motor_A_control(int direction_a, int motor_speed_a) //모터 A의 방향(direction)과 속도(speed) 제어
{
  if(direction_a == HIGH)
  {

     digitalWrite(IN1, HIGH);
     digitalWrite(IN2, LOW);
     analogWrite(ENA,motor_speed_a); //모터의 속도 제어
    
  }
  else
  {
    digitalWrite(IN1, LOW); //모터의 방향 제어
    digitalWrite(IN2, HIGH);
    analogWrite(ENA,motor_speed_a);
    
  }
}
void motor_B_control(int direction_b, int motor_speed_b) //모터 A의 방향(direction)과 속도(speed) 제어
{
  if(direction_b == LOW)
  {

     digitalWrite(IN3, HIGH);
     digitalWrite(IN4, LOW);
     analogWrite(ENB,motor_speed_b); //모터의 속도 제어
    
  }
  else
  {
    digitalWrite(IN3, HIGH); //모터의 방향 제어
    digitalWrite(IN4, LOW);
    analogWrite(ENB,motor_speed_b);
    
  }
}

void imu_rotation_right(void)
{

  while(heading < target_heading_angle)
  {
    compass.read();
    heading = compass.heading();
    
    motor_A_control(HIGH,250);
    motor_B_control(LOW,250);
    
    if(heading >= target_heading_angle)
    {
        break;
    }
  }
  
}

void imu_rotation_left(void)
{

  target_heading_angle += 360;

  while(heading > target_heading_angle)
  {
    compass.read();
    heading = compass.heading();
    heading += 360;
    
    motor_A_control(LOW,250);
    motor_B_control(HIGH,250);
    
    if(heading <= target_heading_angle)
    {
        break;
    }
  }
  
}


void wall_collision_avoid(int base_spped)
{
  float error = 0.0;
  float Kp = 1.7; //나중에 조정해야 할 값(얼마나 돌지)
  int pwm_control = 0;
  int right_pwm = 0;
  int left_pwm  = 0;
  error = (right_sonar - left_sonar);
  error = Kp * error;  
  
  if(error >= 50) error = 50;
  if(error <= -50) error = -50; 
                       

  right_pwm = base_spped - error;
  left_pwm  = base_spped + error;
  
  if(right_pwm <= 0) right_pwm = 0;
  if(left_pwm  <= 0) left_pwm  = 0;

  if(right_pwm >= 240) right_pwm = 240;
  if(left_pwm  >= 240) left_pwm  = 240;
  
  motor_A_control(HIGH,right_pwm); //오른쪽 전진
  motor_B_control(HIGH,left_pwm); // 왼쪽 전진
  
}

void loop() 
{
  front_sonar = sonar[Front].ping_cm()*8; // 전방 센서 측정
  left_sonar  = sonar[Left].ping_cm() *8; // 좌축 센서 측정
  right_sonar = sonar[Right].ping_cm()*8; // 우측 센서 측정
  if(front_sonar == 0.0) front_sonar = MAX_DISTANCE*10; // 0.0 출력이 최대값이므로
  if(left_sonar  == 0.0)  left_sonar = MAX_DISTANCE*10;
  if(right_sonar == 0.0) right_sonar = MAX_DISTANCE*10;


   if(flag[0]==0)
  {
    wall_collision_avoid(215);
    
    if(left_sonar>=WALL_GAP_DISTANCE)
    {
      motor_A_control(HIGH,150); 
      motor_B_control(HIGH,255); 
      delay(270);                              //첫 코너 직진           
         
      compass.read();
      heading = compass.heading();
      
      target_heading_angle = heading - 90;
      
      imu_rotation_left();
      
      flag[0] = 1;
      flag[1] = 0;
      
    }
  }

  else if(flag[1]==0)
  {
    wall_collision_avoid(215);
    
    if(front_sonar<=WALL_GAP_DISTANCE_HALF)
    {
      compass.read();
      heading = compass.heading();
      
      target_heading_angle = heading + 90;  
           
      imu_rotation_right();                      //우회전
      
      flag[1] = 1;
      flag[2] = 0;

    }
  }

  else if(flag[2]==0)
  {
    wall_collision_avoid(215);
   if(front_sonar<=WALL_GAP_DISTANCE_HALF)
    {
      compass.read();
      heading = compass.heading();
      
      target_heading_angle = heading + 180;    
      
      imu_rotation_right();                       //유턴
      
      flag[2] = 1;
      flag[3] = 0;

    }
  }

  else if(flag[3]==0)
  {
    wall_collision_avoid(215);
    if(front_sonar<=WALL_GAP_DISTANCE_HALF)
    {
      compass.read();
      heading = compass.heading();
      
      target_heading_angle = heading - 90;
      
      imu_rotation_left();                           //좌회전
      
      flag[3] = 1;
      flag[4] = 0;

    }
  }



  else if(flag[4]==0)
  {
    wall_collision_avoid(215);
    if(front_sonar<=WALL_GAP_DISTANCE_HALF)
    {
      compass.read();
      heading = compass.heading();
      
      target_heading_angle = heading - 90;
      
      imu_rotation_left();                     //좌회전
      
      flag[4] = 1;
      flag[5] = 0;

    }
  }

  else if(flag[5]==0)
  {
    wall_collision_avoid(215);
  }
 }
